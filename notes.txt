/*
 * CalWatch
 * Copyright (C) 2014 by Dan Wallach
 * Home page: http://www.cs.rice.edu/~dwallach/calwatch/
 * Licensing: http://www.cs.rice.edu/~dwallach/calwatch/licensing.html
 */

If you look at the full Git history of this file, you'll see it grew quite large at some points and
shrank down at others. Mostly it's served as the ongoing to-do list as well as notes for features in
progress.

==================================================================================================

Android Wear command-line things I can never remember:

-- How to set up the emulator: http://www.tech-recipes.com/rx/49586/how-do-i-connect-an-android-wear-emulator-to-a-real-phone/
   adb -d forward tcp:5601 tcp:5601

-- How to connect to Bluetooth debugging for Moto 360: http://blog.timmattison.com/archives/2014/07/16/common-android-wear-tasks-for-developers/
    adb forward tcp:4444 localabstract:/adb-hub; adb connect 127.0.0.1:4444

-- How to get a dump from the watch into a file and see it while it's going
    adb -s localhost:4444 logcat -v time | & tee logdumps/whatever.txt

-- How to enable verbose logging from the command-line

    adb -d shell setprop log.tag.ClockFace VERBOSE
    adb -d shell setprop log.tag.ClockState VERBOSE
    adb -d shell setprop log.tag.MyViewAnim VERBOSE
    adb -d shell setprop log.tag.PhoneActivity VERBOSE
    adb -d shell setprop log.tag.CalendarFetcher VERBOSE
    adb -d shell setprop log.tag.CalendarPermission VERBOSE

    (or, once a shell is running)
    setprop log.tag.ClockFace VERBOSE
    setprop log.tag.ClockState VERBOSE
    setprop log.tag.MyViewAnim VERBOSE
    setprop log.tag.PhoneActivity VERBOSE
    setprop log.tag.CalendarFetcher VERBOSE
    setprop log.tag.CalendarPermission VERBOSE


Refactoring / reengineering
    TODO Rip out Observer/Listener logic (getting untenable) and redo with functional-reactive style
    - CalendarFetcher now works in a vaguely functional style, but we'd want to get rid of the observers
      on ClockState

    TODO too much .toFloat() and .toDouble() in ClockFace -- cleanup?!
    - We could try to standardize everything with Float, but many of the trig function in Math require Double
    - Twice I've tried standardizing on Float and things break: loss of the second-hand (!), and misalignment of the stipple pattern,
      so the thing to try next is standardizing on Double.
    - There's something really subtle and weird about how Kotlin does floating point that I'm clearly missing.

Deal with multiday events that aren't "all day" events
    TODO idea: resurrect all-day events by rendering them (and long events) as thin rings, perhaps separate from the main time wedges

TODO update the slides
    Now a standard lecture in Comp215, so some updates in there already, but should it change
    from an "evolution of CalWatch" into a "how to code for Android" talk? Or not? Also, worth
    adding Kotlin material.

ANDROID N / WEAR 2.0 OVERHAUL
    TODO interaction of numbers-mode and complications -- do we hide the digits?
        (probably just draw the complications over the digits and let them be cropped)

    TODO integration of the general-purpose complication rendering library
        TODO rendering order: do we draw the hands on top of the complications or not?

    TODO handling of no-calendar-permission
        TODO if no calendar permission, display a button with the calendar icon
            TODO if clicked, launch the permission thing (focus on center, vs. complications elsewhere)
        TODO suppress complication rendering unless we have calendar permission?
        TODO otherwise, the usual battery meter?

    TODO pre-load complications? Day-Date left

    TODO build wear-side configuration panel
        TODO: integrate library complication selection
        TODO: port old phone-side config panel to be a wear scrollable recycler monster

    TODO code refactoring
        TODO simplify / kill WireEvent and WireUpdate
        TODO simplify / kill PreferencesHelper

