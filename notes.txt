/*
 * CalWatch
 * Copyright (C) 2014 by Dan Wallach
 * Home page: http://www.cs.rice.edu/~dwallach/calwatch/
 * Licensing: http://www.cs.rice.edu/~dwallach/calwatch/licensing.html
 */

If you look at the full Git history of this file, you'll see it grew quite large at some points and
shrank down at others. Mostly it's served as the ongoing to-do list as well as notes for features in
progress.

==================================================================================================

Android Wear command-line things I can never remember:

-- How to set up the emulator: http://www.tech-recipes.com/rx/49586/how-do-i-connect-an-android-wear-emulator-to-a-real-phone/
   adb -d forward tcp:5601 tcp:5601

-- How to connect to Bluetooth debugging for Moto 360: http://blog.timmattison.com/archives/2014/07/16/common-android-wear-tasks-for-developers/
    adb forward tcp:4444 localabstract:/adb-hub; adb connect 127.0.0.1:4444

-- How to get a dump from the watch into a file and see it while it's going
    adb -s localhost:4444 logcat -v time | & tee logdumps/whatever.txt

-- How to enable verbose logging from the command-line

    adb -d shell setprop log.tag.ClockFace VERBOSE
    adb -d shell setprop log.tag.ClockState VERBOSE
    adb -d shell setprop log.tag.MyViewAnim VERBOSE
    adb -d shell setprop log.tag.PhoneActivity VERBOSE
    adb -d shell setprop log.tag.CalendarFetcher VERBOSE
    adb -d shell setprop log.tag.CalendarPermission VERBOSE


TODO Daydream?
    http://www.hascode.com/2013/01/using-the-android-daydream-api/
    http://developer.android.com/reference/android/service/dreams/DreamService.html
    -- looks almost exactly the same as implementing an activity, or the watchface API
    -- so the new virtual reality stuff is also called Daydream. Hmmm.

Miscellaneous updates
    TODO Adopt Wear Compatibility Library?
    https://github.com/googlesamples/android-WearCompanionLibrary
    https://github.com/googlesamples/android-WclDemoSample
    - Unclear if there's any real benefit for CalWatch in these libraries

Refactoring / reengineering
    TODO Rip out Observer/Listener logic (getting untenable) and redo with functional-reactive style
    - CalendarFetcher now works in a vaguely functional style, but we'd want to get rid of the observers
      on ClockState

    TODO too much .toFloat() and .toDouble() in ClockFace -- cleanup?!
    - We could try to standardize everything with Float, but many of the trig function in Math require Double
    - Twice I've tried standardizing on Float and things break: loss of the second-hand (!), and misalignment of the stipple pattern,
      so the thing to try next is standardizing on Double.
    - There's something really subtle and weird about how Kotlin does floating point that I'm clearly missing.

Deal with multiday events that aren't "all day" events
    TODO idea: resurrect all-day events by rendering them (and long events) as thin rings, perhaps separate from the main time wedges

TODO update the slides
    Now a standard lecture in Comp215, so some updates in there already, but should it change
    from an "evolution of CalWatch" into a "how to code for Android" talk? Or not? Also, worth
    adding Kotlin material.


Overhaul preferences pane on mobile
    TODO verify appearance on multiple phones / watches

    Material Design all the things!
        TODO better indication when a box is selected
          see Photos app multi-select for inspiration


ANDROID N / WEAR 2.0 OVERHAUL
    TODO kill off the fitness code altogether (obsoleted by complications)
    TODO kill off the day/date segment (maybe?!)
    TODO interaction of numbers-mode and complications -- do we hide the digits?

    TODO general-purpose watchface library for rendering / managing complications
        TODO "cat's eye iris" effect for enabling / hiding complications
        TODO configurable transparency for show-through background
        TODO button UI events with internal callbacks for the watchface

    TODO center-button for internal handling
        TODO if no calendar permission, display a button with the calendar icon
        TODO otherwise, transparent button that toggles the complications on and off

    New complications that we need
        TODO two-line textual day/date (replacing the current hard-wired complication)

    Stopwatch / timer
        TODO one complication or two?
        TODO single button complication launch to notification with menus?
        TODO range displays: matched colors of outer rings and inner buttons

    TODO pre-load complications? Day-Date left, stopwatch right, timer top?

    TODO kill phone-side configuration panel altogether
    TODO build wear-side configuration panel
        TODO: four entry "Style" vertical menu with icons for three face styles + seconds-hand-or-not
        TODO: four entry "Complications" vertical menu: left/right/top/bottom

    TODO code refactoring
        TODO kill "mobile" and move "shared" to "wear" (no more companion app!)
        TODO simplify / kill WireEvent and WireUpdate
        TODO simplify / kill PreferencesHelper
        TODO remove EventLayout, keep EventLayoutUniform (has the solver ever failed?)
        TODO kill XWatchfaceReceiver
