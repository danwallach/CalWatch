apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

// idea borrowed from here: http://stackoverflow.com/questions/17097263/automatically-versioning-android-project-from-git-describe-with-android-studio-g
def getVersionCode = { ->
    def versionCode = -1

    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-list', '--all', '--count'
            standardOutput = stdout
        }

        versionCode = Integer.parseInt(stdout.toString().trim())

        println "version code: " + versionCode

    }
    catch (ignored) { }

    return versionCode
}

def getVersionName = { ->
    def versionName = "noName"
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--dirty'
            standardOutput = stdout
        }

        versionName = stdout.toString().trim()

        println "version name: " + versionName
    }
    catch (ignored) { }

    return versionName
}

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'
    defaultConfig {
        applicationId 'org.dwallach.calwatch2'
        targetSdkVersion 28
//        minSdkVersion 25
        minSdkVersion 23
        versionName getVersionName()
        versionCode getVersionCode()
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
    buildTypes {
        release {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            minifyEnabled true
            shrinkResources true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    publishNonDefault true

    productFlavors {
        wear1 {
            // Use the defaultConfig value
        }
        wear2 {
            minSdkVersion 25
        }
    }

    flavorDimensions "normal"

    productFlavors {
        wear1 {
            dimension "normal"
        }

        wear2 {
            dimension "normal"
        }
    }

}
allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.google.android.support:wearable:2.4.0'
    compileOnly 'com.google.android.wearable:wearable:2.4.0'

    implementation 'com.google.android.gms:play-services-wearable:16.0.1'

    implementation "com.android.support:wear:28.0.0"
//    implementation "com.android.support:palette-v7:28.0.0"
//    implementation "com.android.support:cardview-v7:28.0.0"
//    implementation "com.android.support:support-v4:28.0.0"
//    implementation "com.android.support:appcompat-v7:28.0.0"

    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.anko:anko:$anko_version"
//    implementation "org.jetbrains.anko:anko-sdk25:$anko_version"
//    implementation "org.jetbrains.anko:anko-support-v4:$anko_version"
//    implementation "org.jetbrains.anko:anko-appcompat-v7:$anko_version"
//    implementation "org.jetbrains.anko:anko-cardview-v7:$anko_version"
}

// https://stackoverflow.com/questions/42374151/all-com-android-support-libraries-must-use-the-exact-same-version-specification
configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        def requested = details.requested
        if (requested.group == 'com.android.support') {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion '28.0.0'
            }
        }
    }
}