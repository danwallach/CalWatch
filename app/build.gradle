plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id "com.louiscad.splitties" version "0.2.0"
//    id 'kotlin-android-extensions'
}

// idea borrowed from here: http://stackoverflow.com/questions/17097263/automatically-versioning-android-project-from-git-describe-with-android-studio-g
def getVersionCode = { String apk ->
    def versionCode = -1

    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-list', '--all', '--count'
            standardOutput = stdout
        }

        // Note the use of string concatenation, then convert to an Integer later on; this ensures
        // that when Git's version number grows an extra digit, everything here continues working
        // correctly, i.e., using the apk target number as a prefix.
        versionCode = apk + stdout.toString().trim()

        println "version code: " + versionCode
    }
    catch (ignored) {
    }

    return Integer.parseInt(versionCode)
}

def getVersionName = { ->
    def versionName = "noName"
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--dirty'
            standardOutput = stdout
        }

        versionName = stdout.toString().trim()

        println "version name: " + versionName
    }
    catch (ignored) {
    }

    return versionName
}

android {
    compileSdkVersion 29
    buildFeatures {
        viewBinding true
    }
    defaultConfig {
        applicationId 'org.dwallach.calwatch2'
        targetSdkVersion 29
//        minSdkVersion 25
        minSdkVersion 23
        multiDexEnabled true
        versionName getVersionName()
    }
    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }
    buildTypes {
        release {
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            minifyEnabled true
            shrinkResources true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    publishNonDefault true

    productFlavors {
        wear1 {
            // Use the defaultConfig value
            dimension "normal"
            versionCode = getVersionCode("23")
        }
        wear2 {
            dimension "normal"
            minSdkVersion 25
            versionCode = getVersionCode("25")
        }
    }

    flavorDimensions "normal"

    // avoids weird conflicts in builds
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/atomicfu.kotlin_module'
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}
allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.google.android.support:wearable:2.9.0'
    implementation 'androidx.appcompat:appcompat:1.4.2'
    compileOnly 'com.google.android.wearable:wearable:2.9.0'

    implementation 'com.google.android.gms:play-services-wearable:17.1.0'

    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.wear:wear:1.2.0'

    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.0'

    implementation 'com.louiscad.splitties:splitties-activities:3.0.0'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

// https://stackoverflow.com/questions/42374151/all-com-android-support-libraries-must-use-the-exact-same-version-specification
configurations.all {
    resolutionStrategy.eachDependency { details ->
        def requested = details.requested
        if (requested.group == 'com.android.support') {
            if (!requested.name.startsWith("multidex")) {
                details.useVersion '28.0.0'
            }
        }
    }
}
